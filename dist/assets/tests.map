{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","sparta/tests/integration/components/sound-track-creator-test.js","sparta/tests/lint/app.lint-test.js","sparta/tests/lint/templates.template.lint-test.js","sparta/tests/lint/tests.lint-test.js","sparta/tests/test-helper.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"sparta/tests/integration/components/sound-track-creator-test\", [\"ember-qunit\"], function (_emberQunit) {\n  \"use strict\";\n\n  (0, _emberQunit.moduleForComponent)('sound-track-creator', 'Integration | Component | sound track creator', {\n    integration: true\n  });\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ehok613Y\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"sound-track-creator\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), '');\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"KcxamlW8\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"sound-track-creator\\\",null,null,{\\\"statements\\\":[[0,\\\"  template block text\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    return assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define(\"sparta/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/how-to.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/how-to.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/sound-track-creator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sound-track-creator.js should pass ESLint\\n\\n20:18 - Don\\'t use observers if possible (ember/no-observers)\\n109:87 - Unnecessary escape character: \\\\/. (no-useless-escape)\\n109:96 - Unnecessary escape character: \\\\/. (no-useless-escape)\\n128:19 - Don\\'t use observers if possible (ember/no-observers)\\n179:7 - Unexpected console statement. (no-console)\\n264:7 - Unexpected console statement. (no-console)\\n312:11 - Unexpected constant condition. (no-constant-condition)\\n350:7 - Unexpected console statement. (no-console)\\n423:9 - Unexpected console statement. (no-console)\\n428:7 - Unexpected console statement. (no-console)\\n444:9 - Unexpected console statement. (no-console)\\n466:7 - Unexpected console statement. (no-console)\\n493:5 - Unexpected console statement. (no-console)\\n501:5 - Unexpected console statement. (no-console)\\n516:9 - Unexpected console statement. (no-console)\\n522:15 - Unexpected console statement. (no-console)\\n541:9 - Unexpected console statement. (no-console)\\n580:7 - Unexpected console statement. (no-console)\\n589:5 - Unexpected console statement. (no-console)\\n592:7 - Unexpected console statement. (no-console)\\n615:9 - Unexpected console statement. (no-console)\\n625:7 - Unexpected console statement. (no-console)\\n634:17 - Unexpected console statement. (no-console)\\n642:19 - Unexpected console statement. (no-console)\\n669:9 - Unexpected console statement. (no-console)');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/backend-adapter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/backend-adapter.js should pass ESLint\\n\\n21:5 - Unexpected console statement. (no-console)');\n  });\n  QUnit.test('services/record-audio.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/record-audio.js should pass ESLint\\n\\n51:5 - Unexpected console statement. (no-console)');\n  });\n});","define(\"sparta/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('sparta/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sparta/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('sparta/templates/components/dub-track-library.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sparta/templates/components/dub-track-library.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('sparta/templates/components/how-to.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sparta/templates/components/how-to.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('sparta/templates/components/sound-track-creator.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sparta/templates/components/sound-track-creator.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('sparta/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sparta/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('sparta/templates/library.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sparta/templates/library.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('sparta/templates/new.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sparta/templates/new.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"sparta/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","define(\"sparta/tests/test-helper\", [\"sparta/app\", \"sparta/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define('sparta/config/environment', [], function() {\n  var prefix = 'sparta';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('sparta/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}